; 5. Se da o lista neliniara. Sa se scrie un program LISP pentru
; determinarea numarului de subliste de la orice nivel
; pentru atomul numeric minim de pe nivelurile impare este par-
; nivelul superficial al listei se considera 1. Prelucrarea
; se face folosing o functie MAP. De exemplu, lista
; (A (B 2) (2 C 4) (1 (3 F)) (((G) 4) 2)) are 3 astfel de
; subliste.

; getMinimumValue(a, b) = null if a and b are not numbers,
;                       = a if b is not a number,
;                       = b if a is not a number,
;                       = a if a < b,
;                       = b otherwise;
(DEFUN getMinimumValue(a b)
           (COND
            ((and (not (numberp a)) (not (numberp b))) nil)
            ((not (numberp a)) b)
            ((not (numberp b)) a)
            ((< a b) a)
            (t b)
           )
)

; getMinimumValueOfList(l1l2...ln) = null if n = 0,
;                                  = getMinimumValue(l1, getMinimumValueOfList(l2...ln)) otherwise;
(DEFUN getMinimumValueOfList(l)
           (COND
            ((null l) 0)
            (t (getMinimumValue (car l) (getMinimumValueOfList (cdr l))))
           )
)

; checkIfNumberIsEven(n) = true if n is even,
;                        = false otherwise;
(DEFUN checkIfNumberIsEven(n)
    (COND
     ((equal (mod n 2) 0) t)
     (t nil)
    )
)
       
; checkIfMinimumNumericAtomIsEven(l1l2...ln) = true if getMinimumValueOfList(l) is number and is even,
;                                            = false otherwise;     
(DEFUN checkIfMinimumNumericAtomIsEven(l)
           (lambda (x) 
                   (COND
                    ((and (numberp x) (checkIfNumberIsEven x)) t)
                    (t nil)
                   ) getMinimumValueOfList(l)
           )
)
              
; countSublistsWhereMinimumNumberOnOddLevelEven(l, level) = 0 if l is atom,
;                                                         = 1 + sum(countSublistsWhereMinimumNumberOnOddLevelEven(l, level + 1)) if level is odd and checkIfMinimumNumericAtomIsEven(l) is true,
;                                                         = sum(countSublistsWhereMinimumNumberOnOddLevelEven(l, level + 1)) otherwise;
(DEFUN countSublistsWhereMinimumNumberOnOddLevelEven(l level)
           (COND
            ((atom l) 0)
            ((and (not (checkIfNumberIsEven level)) (checkIfMinimumNumericAtomIsEven l)) (+ 1 (apply #'+ (mapcar #' (lambda (x) (countSublistsWhereMinimumNumberOnOddLevelEven x (+ level 1))) l))))
            (t (apply #'+ (mapcar #' (lambda (x) (countSublistsWhereMinimumNumberOnOddLevelEven x (+ level 1))) l)))
           )
)

(DEFUN mainCountSublistsWhereMinimumNumberOnOddLevelEven (l)
           (countSublistsWhereMinimumNumberOnOddLevelEven l 1)
)
       
(print (mainCountSublistsWhereMinimumNumberOnOddLevelEven '(A (B 2) (2 C 4) (1 (3 F)) (((G) 4) 2)) ))