% 3. Write a Prolog program to generate the list of all arrangements 
% of k elements of a given product P from a list of integer numbers. 
% Explain the proposed algorithm. For example, for the list 
% [2,5,3,4,10], k=2 and P=20 the result is [[2,10],[10,2],[5,4],[4,5]] 
% (not necessarily in this order).


% insertElement(l1l2...ln, element) = {element} U l1l2...ln
%                                     {l1} U insertElement(l2...ln, element);
insertElement(L, E, [E|L]).
insertElement([H|T], E, [H|R]):-
    insertElement(T, E, R).

% generateArrangements(l1l2...ln, k) = {l1} if k = 1,
%                                    = generateArrangements(l2...ln, k) if k >= 1,
%                                    = insertElement(generateArrangements(l2...ln, k-1), l1) if k > 1;
generateArrangements([H|_], 1, [H]).
generateArrangements([_|T], K, R):-
	generateArrangements(T, K, R).
generateArrangements([H|T], K, R):-
    K > 1,
    NewK is K - 1,
    generateArrangements(T, NewK, NewR),
    insertElement(NewR, H, R).

% getProductOfArrangement(l1l2...ln) = 1 if n = 1,
%                                    = l1 * getProductOfArrangement(l2...ln) otherwise;
getProductOfArrangement([], 1).
getProductOfArrangement([H|T], R):-
    getProductOfArrangement(T, NewR),
    R is NewR * H.

% checkCondition(l1l2..ln, p) = true if getProductOfArrangement(l1l2...ln) = p,
%                             = false otherwise;
checkCondition(Arrangement, P):-
    getProductOfArrangement(Arrangement, Product),
    Product =:= P.

% generateArrangementsOfKElementsOfGivenProduct(l1l2...ln, k, p) = every 
%       arrangement generated by generateArrangements with checkCondition(l1l2..ln, p) = true;
generateArrangementsOfKElementsOfGivenProduct(L, Arrangement, K, P):-
    generateArrangements(L, K, Arrangement),
    checkCondition(Arrangement, P).

findAllArrangementsOfKElementsOfGivenProduct(L, K, P, R):-
	findall(Reach, generateArrangementsOfKElementsOfGivenProduct(L, Reach, K, P), R).