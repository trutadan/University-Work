#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mutex;
int totalSum = 0;

typedef struct {
	char fileName[100];
	int n;
} pair;

void* threadFunction(void* arguments) {
	pair tuple = *(pair*)arguments;

	FILE* file = fopen(tuple.fileName, "r");
	if (file == NULL) {
		printf("Error on opening the file!\n");
		free(arguments);
		return 0;
	}

	int index = tuple.n;
	int number;
	while(fscanf(file, "%d", &number) == 1 && index > 0)
		if (number % 2 == 0) {

			pthread_mutex_lock(&mutex);
			totalSum += number;
			pthread_mutex_unlock(&mutex);

			index--;
		}

	free(arguments);
	fclose(file);
	return 0;
}

int main(int argc, char* argv[]) {

	if ((argc-1) % 2 != 0) {
		printf("Not enough arguments provided!\n");
		exit(0);
	}

	pthread_t* threads;
	threads = malloc((argc-1)/2 * sizeof(pthread_t));

	pthread_mutex_init(&mutex, 0);

	for(int index = 1; index < argc; index += 2) {
		pair* currPair;
		currPair = malloc(sizeof(pair));
		strcpy(currPair->fileName, argv[index]);
		currPair->n = atoi(argv[index+1]);

		pthread_create(&threads[(index-1) / 2], 0, &threadFunction, currPair);
	}

	for(int index = 0; index < (argc-1) / 2; index++)
		pthread_join(threads[index], 0);

	free(threads);
	pthread_mutex_destroy(&mutex);

	printf("The final sum is: %d!\n", totalSum);

	return 0;
}
