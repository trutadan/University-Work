#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>

typedef struct {
        char fileName[100];
        int n;
        char c;
        int index;
} triplet;

void* threadFunction(void* triple) {
        triplet trp = *(triplet*)triple;

        FILE* file;
        file = fopen(trp.fileName, "r");

        if (file == NULL) {
                printf("Thread %d: could not open the file!\n", trp.index);
		free(triple);
		return 0;
        }

        int charIndex = 1;
        char character;

        while (fscanf(file, "%c", &character) == 1 && charIndex < trp.n)
                charIndex++;

        if (charIndex == trp.n) {
                if (character == trp.c)
                        printf("Thread %d: %c\n", trp.index, character);

                else
                        printf("Thread %d: not the same\n", trp.index);
        }

        else
                printf("Thread %d: not enough characters\n", trp.index);

        free(triple);
	fclose(file);

        return 0;
}

int main(int argc, char* argv[]) {

        if (((argc-1)%3) != 0 || argc < 4) {
                printf("Not enough arguments provided!\n");
                exit(0);
        }

        pthread_t* threads;
        threads = malloc(((argc-1) / 3) * sizeof(pthread_t));
 
	int index=1;
        while (index < argc) {
                triplet* trp;
                trp = malloc(sizeof(triplet));
                strcpy(trp->fileName, argv[index]);
                trp->n = atoi(argv[index+1]);
                trp->c = argv[index+2][0];
                trp->index = (index-1)/3;

                pthread_create(&threads[index/3], 0, threadFunction, (void*)trp);

                index += 3;
        }


        for (int index=0; index < (argc-1)/3; index++)
                pthread_join(threads[index], 0);

        free(threads);

        return 0;
}
