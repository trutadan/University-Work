PIF: {
  (start, (-1, -1))
  (puts, (-1, -1))
  ((, (-1, -1))
  ("Give me a natural number", (6, 0))
  (), (-1, -1))
  (;, (-1, -1))
  (string, (-1, -1))
  (input_string, (18, 0))
  (;, (-1, -1))
  (input_string, (18, 0))
  (=, (-1, -1))
  (gets, (-1, -1))
  ((, (-1, -1))
  (), (-1, -1))
  (;, (-1, -1))
  (string, (-1, -1))
  (input_string_without_newline, (50, 0))
  (;, (-1, -1))
  (input_string_without_newline, (50, 0))
  (=, (-1, -1))
  (cuts, (-1, -1))
  ((, (-1, -1))
  (input_string, (18, 0))
  (), (-1, -1))
  (;, (-1, -1))
  (int, (-1, -1))
  (input_number, (4, 0))
  (;, (-1, -1))
  (input_number, (4, 0))
  (=, (-1, -1))
  (to_i, (-1, -1))
  ((, (-1, -1))
  (input_string_without_newline, (50, 0))
  (), (-1, -1))
  (;, (-1, -1))
  (bool, (-1, -1))
  (is_prime, (56, 0))
  (;, (-1, -1))
  (is_prime, (56, 0))
  (=, (-1, -1))
  (true, (48, 0))
  (;, (-1, -1))
  (int, (-1, -1))
  (number, (49, 0))
  (;, (-1, -1))
  (number, (49, 0))
  (=, (-1, -1))
  (2, (50, 1))
  (;, (-1, -1))
  (while, (-1, -1))
  (number, (49, 0))
  (<, (-1, -1))
  (input_number, (4, 0))
  (/, (-1, -1))
  (2, (50, 1))
  (do, (-1, -1))
  (if, (-1, -1))
  ((, (-1, -1))
  (input_number, (4, 0))
  (%, (-1, -1))
  (number, (49, 0))
  (==, (-1, -1))
  (0, (48, 1))
  (), (-1, -1))
  (is_prime, (56, 0))
  (=, (-1, -1))
  (false, (23, 0))
  (;, (-1, -1))
  (break, (-1, -1))
  (;, (-1, -1))
  (end, (-1, -1))
  (;, (-1, -1))
  (end, (-1, -1))
  (;, (-1, -1))
  (puts, (-1, -1))
  ((, (-1, -1))
  (is_prime, (56, 0))
  (), (-1, -1))
  (;, (-1, -1))
  (stop, (-1, -1))
}
